@inherits LayoutComponentBase
@inject IUserService UserService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject ILoginService LoginService
@inject IPopupService PopupService


<MContainer Fluid Style="width: 400px;margin-top: 200px;">
    <h1 style="text-align: center;">任务发布系统</h1>
    <MForm EnableValidation @bind-Value="_valid" Model="_loginDto" OnValidSubmit="HandleLogin">
        <MTextField @bind-Value="_loginDto.UserName" Counter="true" Label="账号" required></MTextField>
        <MTextField @bind-Value="_loginDto.Password" AppendIcon="@(_passwordShow ? "mdi-eye" : "mdi-eye-off")"
                    Type="@(_passwordShow ? "text" : "password")" Label="密码" Hint="至少输入6个字符" Counter="true"
                    OnAppendClick="() => _passwordShow = !_passwordShow" required>
        </MTextField>
        <MButton Block Dark Color="#2196F3" Style="margin-top:10px;" Type="submit">登录</MButton>

        <MOverlay Value="_overlay">
            <MProgressCircular indeterminate
                                Size="64">
            </MProgressCircular>
        </MOverlay>
    </MForm>
</MContainer>

@code {

    #region 加载动画

    bool _overlay = false;

    #endregion

    private LoginDto _loginDto = new();
    private bool _passwordShow = false;
    private bool _valid = true;

    protected override async Task OnInitializedAsync()
    {
        await PopupService.ConfigToast(config => { config.Position = ToastPosition.TopRight; });

        await base.OnInitializedAsync();
    }

    private async Task HandleLogin()
    {
        _overlay = true;
        _loginDto.ClientUA = ClientUA.PC;
        var result = await UserService.LoginAsync<WcResponse<RespToken>>(_loginDto);

        if (result.Code == WcStatus.Success)
        {
            await LoginService.Login(result.Data!.Token);
            NavigationManager.NavigateTo("");
        }
        else
        {
            _valid = false;
            await PopupService.ToastAsync(result.Message, AlertTypes.Error);
            await LoginService.Logout();
            NavigationManager.NavigateTo("");
        }

        Console.WriteLine(result.Message);

        await GetUserLoginInfo();
        Task.WaitAll();
        _overlay = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task GetUserLoginInfo()
    {
        var result = await UserService.GetLoginUserAsync<WcResponse<UserDto>>();

        if (result.Code == WcStatus.Success)
        {
            await LocalStorageService.SetItemAsync<UserDto>(GlobalVars.ClientUserInfo, result.Data!);
        }
        else
        {
            await LoginService.Logout();
            NavigationManager.NavigateTo("");
        }
    }

}